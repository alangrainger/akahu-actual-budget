{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/version.ts","../src/errors.ts","../src/resources/base.ts","../src/resources/auth.ts","../src/resources/identities.ts","../src/resources/accounts.ts","../src/resources/connections.ts","../src/resources/categories.ts","../src/resources/payments.ts","../src/resources/transfers.ts","../src/resources/transactions.ts","../src/resources/users.ts","../src/resources/webhooks.ts","../src/resources/parties.ts","../src/client.ts"],"sourcesContent":["import axios from \"axios\";\nimport type { AxiosResponse, AxiosError } from \"axios\";\nexport type Protocol = \"http\" | \"https\";\n\n/**\n * Build a URL from constituent components.\n */\nexport function buildUrl({\n  protocol,\n  host,\n  port,\n  path = \"\",\n  query = {},\n}: {\n  protocol: Protocol;\n  host: string;\n  port?: number;\n  path?: string;\n  query?: Record<string, string | undefined>;\n}): string {\n  // If not specified, port will be chosen by browser based on protocol choice (http or https).\n  const _port = port ? `:${port}` : \"\";\n\n  // Clean `undefined` values from the query params\n  const cleanedQuery = Object.fromEntries(\n    Object.entries(query || {}).filter(([_, v]) => typeof v !== \"undefined\")\n  ) as Record<string, string>;\n\n  // Convert to URL encoded query string\n  const queryString =\n    Object.keys(cleanedQuery).length !== 0\n      ? \"?\" + new URLSearchParams(cleanedQuery).toString()\n      : \"\";\n\n  return `${protocol}://${host}${_port}/${path}${queryString}`;\n}\n\nexport function pick<TObj extends Record<string, any>, TKey extends keyof TObj>(\n  obj: TObj,\n  ...props: TKey[]\n) {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([k]) => props.includes(k as TKey))\n  ) as Pick<TObj, TKey>;\n}\n\n/**\n * Axios error interceptor to retry on network failures.\n * Dormant by default - is activated by including `retries` in the axios config.\n */\nexport function axiosRetryOnNetworkError(\n  error: AxiosError\n): Promise<AxiosResponse> {\n  // Only handle axios errors.\n  if (!error.isAxiosError) return Promise.reject(error);\n\n  const { config }: any = error;\n  const { method, headers, retries = 0, __retryCount = 0 } = config;\n\n  // POST requests can only be retried if they include an idempotency key.\n  // Other methods (i.e. get, patch, delete) are considered idempotent by default.\n  const isIdempotent =\n    method.toUpperCase() !== \"POST\" ||\n    typeof headers[\"Idempotency-Key\"] === \"string\";\n\n  const shouldRetry =\n    isIdempotent &&\n    __retryCount < retries &&\n    isNetworkError(error) && // Don't retry due to server errors\n    isRetryAllowed(error); // Don't retry if the error is permanent (e.g. SSL related)\n\n  if (!shouldRetry) {\n    return Promise.reject(error);\n  }\n\n  config.__retryCount = __retryCount + 1;\n  return axios(config);\n}\n\n/**\n * Determine whether an axios error instance was caused by network error\n * (and should therefore be retryable).\n *\n * Borrowed from {@link https://github.com/softonic/axios-retry/blob/master/es/index.js}\n * with minor changes as we want to retry on timeout.\n */\nfunction isNetworkError(error: AxiosError): boolean {\n  return (\n    error.isAxiosError &&\n    !error.response && // Network errors have no response\n    !axios.isCancel(error)\n  ); // Don't retry cancelled requests\n}\n\n/**\n * Inspect network error code from axios to determine if it makes sense to retry it.\n *\n * Borrowed from {@link https://github.com/sindresorhus/is-retry-allowed/blob/main/index.js}\n */\nfunction isRetryAllowed(error: AxiosError): boolean {\n  return (\n    error.code === undefined || // Errors due to timeout have no error code.\n    !retryDenyList.has(error.code)\n  );\n}\n\nconst retryDenyList = new Set([\n  \"ENOTFOUND\",\n  \"ENETUNREACH\",\n  \"UNABLE_TO_GET_ISSUER_CERT\",\n  \"UNABLE_TO_GET_CRL\",\n  \"UNABLE_TO_DECRYPT_CERT_SIGNATURE\",\n  \"UNABLE_TO_DECRYPT_CRL_SIGNATURE\",\n  \"UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY\",\n  \"CERT_SIGNATURE_FAILURE\",\n  \"CRL_SIGNATURE_FAILURE\",\n  \"CERT_NOT_YET_VALID\",\n  \"CERT_HAS_EXPIRED\",\n  \"CRL_NOT_YET_VALID\",\n  \"CRL_HAS_EXPIRED\",\n  \"ERROR_IN_CERT_NOT_BEFORE_FIELD\",\n  \"ERROR_IN_CERT_NOT_AFTER_FIELD\",\n  \"ERROR_IN_CRL_LAST_UPDATE_FIELD\",\n  \"ERROR_IN_CRL_NEXT_UPDATE_FIELD\",\n  \"OUT_OF_MEM\",\n  \"DEPTH_ZERO_SELF_SIGNED_CERT\",\n  \"SELF_SIGNED_CERT_IN_CHAIN\",\n  \"UNABLE_TO_GET_ISSUER_CERT_LOCALLY\",\n  \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\",\n  \"CERT_CHAIN_TOO_LONG\",\n  \"CERT_REVOKED\",\n  \"INVALID_CA\",\n  \"PATH_LENGTH_EXCEEDED\",\n  \"INVALID_PURPOSE\",\n  \"CERT_UNTRUSTED\",\n  \"CERT_REJECTED\",\n  \"HOSTNAME_MISMATCH\",\n]);\n\n// https://github.com/flexdinesh/browser-or-node/blob/master/src/index.js\nexport const isBrowser = () =>\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nexport const isNode = () =>\n  typeof process === \"object\" &&\n  Boolean(process.versions?.node) &&\n  !isReactNative();\n\n// https://github.com/facebook/react-native/commit/3c65e62183ce05893be0822da217cb803b121c61\nexport const isReactNative = () =>\n  typeof navigator === \"object\" && navigator.product === \"ReactNative\";\n","export const version = \"1.15.3\";","import type { AxiosResponse } from \"axios\";\n\nclass AkahuError extends Error {\n  /**\n   * Flag that can be used to detect exceptions thrown by the Akahu SDK.\n   */\n  isAkahuError = true;\n  /**\n   * Legacy static property for backwards compatibility. Prefer the instance\n   * property `isAkahuError` instead.\n   * @deprecated\n   */\n  static isAkahuError = true;\n}\n\n/**\n * Error type for error responses received from the Akahu API.\n * An error response is characterised by a non 2XX status code and/or a body\n * payload that contains `success: false` along with an accompanying error message.\n *\n * @noInheritDoc\n * @category Error\n */\nexport class AkahuErrorResponse extends AkahuError {\n  /**\n   * The response status code.\n   */\n  status: number;\n  /**\n   * The full {@link https://axios-http.com/docs/res_schema AxiosReponse}\n   * object from axios.\n   */\n  response: AxiosResponse;\n\n  /** @internal */\n  static oAuthErrorCodeMap: Record<string, string> = {\n    invalid_request: \"Invalid OAuth request.\",\n    unauthorized_client:\n      \"This application is not authorized to make this request.\",\n    unsupported_response_type: \"Unsupported OAuth response type.\",\n    invalid_scope: \"Unknown or invalid scope.\",\n    server_error: \"Unknown server error.\",\n    temporarily_unavailable:\n      \"The authorization server is temporarily unavailable.\",\n    invalid_grant: \"Invalid OAuth request.\",\n  };\n\n  /** @internal */\n  constructor(response: AxiosResponse) {\n    const { status, statusText, data = {} } = response;\n    const { message, error, error_description } = data;\n    let _message: string;\n\n    // `error` and `error_description` are specific to the OAuth endpoints.\n    // `error_description` is more user-friendly, but optional:\n    // https://www.oauth.com/oauth2-servers/server-side-apps/possible-errors/\n    if (typeof error_description === \"string\") {\n      _message = error_description;\n    } else if (error in AkahuErrorResponse.oAuthErrorCodeMap) {\n      _message = AkahuErrorResponse.oAuthErrorCodeMap[error];\n    } else {\n      // Detail for other error responses are nested under the `message` key.\n      // Include a fallback to statusText just in case things go really wrong.\n      _message = message ?? statusText;\n    }\n\n    super(_message);\n    this.status = status;\n    this.response = response;\n  }\n}\n\n/**\n * Error type for errors that occur during the webhook validation process.\n *\n * @noInheritDoc\n * @category Error\n */\nexport class AkahuWebhookValidationError extends AkahuError {}\n","import type { AkahuClient } from \"../client\";\n\n/**\n * @internal\n */\nexport class BaseResource {\n  protected readonly _client: AkahuClient;\n\n  /**\n   * @internal\n   */\n  constructor(client: AkahuClient) {\n    this._client = client;\n  }\n}\n","import { Protocol, buildUrl } from \"../utils\";\nimport { BaseResource } from \"./base\";\nimport { AuthorizationToken } from \"../models\";\n\n/**\n * Utilities for authorizing users using OAuth2.\n *\n * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2}\n *\n * @category Resource\n */\nexport class AuthResource extends BaseResource {\n  /**\n   * Build the OAuth Authorization URL\n   *\n   * @param options Options for customising the generated URL.\n   *\n   * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2#the-authorization-request}\n   */\n  public buildAuthorizationUrl(options: {\n    /**\n     * Where to redirect the user once they have accepted or rejected the access request.\n     * This **must** match one of your app's Redirect URIs.\n     */\n    redirect_uri: string;\n    /**\n     * The type of OAuth response. Currently `code` is the only supported option.\n     *\n     * @default `code`\n     */\n    response_type?: string;\n    scope?: string;\n    email?: string;\n    connection?: string;\n    state?: string;\n    protocol?: Protocol;\n    host?: string;\n    port?: number;\n    path?: string;\n  }) {\n    // Unpack options with defaults\n    const {\n      protocol,\n      host,\n      port,\n      path,\n      response_type,\n      scope,\n      redirect_uri,\n      state,\n      email,\n      connection,\n    } = {\n      protocol: \"https\" as const,\n      host: \"oauth.akahu.nz\",\n      path: \"\",\n      response_type: \"code\",\n      scope: \"ENDURING_CONSENT\",\n      ...options,\n    };\n\n    // Construct main OAuth query params\n    const { appToken: client_id } = this._client.authConfig;\n    const query: Record<string, string> = {\n      response_type,\n      redirect_uri,\n      scope,\n      client_id,\n    };\n\n    // Include optional params if specified in options\n    if (email) query.email = email;\n    if (connection) query.connection = connection;\n    if (state) query.state = state;\n\n    return buildUrl({ protocol, host, port, path, query });\n  }\n\n  /**\n   * Exchange an OAuth authorization code for an access token.\n   *\n   * {@link https://developers.akahu.nz/docs/authorizing-with-oauth2#exchanging-the-authorization-code}\n   * {@link https://developers.akahu.nz/reference/post_token}\n   */\n  public async exchange(\n    code: string,\n    redirect_uri: string,\n    grant_type: string = \"authorization_code\"\n  ): Promise<AuthorizationToken> {\n    // POST parameters for OAuth code exchange\n    const { appToken: client_id, appSecret: client_secret } =\n      this._client.authConfig;\n    const data = { code, redirect_uri, grant_type, client_id, client_secret };\n\n    return await this._client._apiCall<AuthorizationToken>({\n      path: \"/token\",\n      method: \"POST\",\n      data,\n    });\n  }\n\n  /**\n   * Revoke the specified user auth token:\n   *\n   * {@link https://developers.akahu.nz/reference/delete_token}\n   */\n  public async revoke(token: string) {\n    return await this._client._apiCall<void>({\n      path: \"/token\",\n      method: \"DELETE\",\n      auth: { token },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport { Protocol } from \"../utils\";\nimport {\n  IdentityResult,\n  IdentityVerifyNameQuery,\n  IdentityVerifyNameResult,\n} from \"../models\";\n\n/**\n * Utilities for requesting identity verification using OAuth2.\n *\n * {@link https://developers.akahu.nz/docs/identity-verification}\n *\n * @category Resource\n */\nexport class IdentitiesResource extends BaseResource {\n  /**\n   * Build the Identity OAuth Authorization URL.\n   *\n   * {@link https://developers.akahu.nz/docs/identity-verification#the-authorization-request}\n   */\n  public buildAuthorizationUrl(params: {\n    protocol?: Protocol;\n    host?: string;\n    port?: number;\n    path?: string;\n    response_type?: string;\n    redirect_uri: string;\n    scope?: string;\n    state?: string;\n  }) {\n    // Borrow implementation from `OAuthResource.buildAuthorizationUrl`\n    return this._client.auth.buildAuthorizationUrl({\n      scope: \"ONEOFF\",\n      ...params,\n    });\n  }\n\n  /**\n   * Retrieve an identity result using the code/id returned after successful authorization using the\n   * OAuth identity verification flow.\n   *\n   * {@link https://developers.akahu.nz/docs/identity-verification#retrieving-identity-results-with-the-oauth-result-code}\n   */\n  public async get(code: string) {\n    return this._client._apiCall<IdentityResult>({\n      path: `/identity/${code}`,\n      auth: { basic: true },\n    });\n  }\n\n  /**\n   * (**BETA**) Verify the user's name against an identity result.\n   *\n   * {@link https://developers.akahu.nz/docs/oneoff-verify-name}\n   */\n  public async verifyName(code: string, query: IdentityVerifyNameQuery) {\n    return this._client._apiCall<IdentityVerifyNameResult>({\n      path: `/identity/${code}/verify/name`,\n      method: \"POST\",\n      data: query,\n      auth: { basic: true },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\n\nimport {\n  Account,\n  Transaction,\n  PendingTransaction,\n  TransactionQueryParams,\n  Paginated,\n} from \"../models\";\n\n/**\n * Utilities for managing Akahu accounts that have been linked by users.\n *\n * {@link https://developers.akahu.nz/docs/accessing-account-data}\n *\n * @category Resource\n */\nexport class AccountsResource extends BaseResource {\n  /**\n   * List all accounts that have been connected by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_accounts}\n   */\n  public async list(token: string): Promise<Account[]> {\n    return await this._client._apiCall<Account[]>({\n      path: \"/accounts\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * Get a single account that has been connected by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_accounts-id}\n   */\n  public async get(token: string, accountId: string): Promise<Account> {\n    return await this._client._apiCall<Account>({\n      path: `/accounts/${accountId}`,\n      auth: { token },\n    });\n  }\n\n  /**\n   * List transactions for a specified account.\n   *\n   * {@link https://developers.akahu.nz/reference/get_accounts-id-transactions}\n   */\n  public async listTransactions(\n    token: string,\n    accountId: string,\n    query: TransactionQueryParams = {}\n  ): Promise<Paginated<Transaction>> {\n    return await this._client._apiCall<Paginated<Transaction>>({\n      path: `/accounts/${accountId}/transactions`,\n      auth: { token },\n      query,\n    });\n  }\n\n  /**\n   * List pending transactions for a specified account.\n   *\n   * {@link https://developers.akahu.nz/reference/get_accounts-id-transactions-pending}\n   */\n  public async listPendingTransactions(\n    token: string,\n    accountId: string\n  ): Promise<PendingTransaction[]> {\n    return await this._client._apiCall<PendingTransaction[]>({\n      path: `/accounts/${accountId}/transactions/pending`,\n      auth: { token },\n    });\n  }\n\n  /**\n   * Revoke a single account from the specified `token`.\n   *\n   * After this call the token will no longer have access to the specified account or it's associated data,\n   * including transactions.\n   *\n   * {@link https://developers.akahu.nz/reference/delete_accounts-id}\n   */\n  public async revoke(token: string, accountId: string): Promise<void> {\n    return await this._client._apiCall<void>({\n      path: `/accounts/${accountId}`,\n      method: \"DELETE\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * Refresh a single account that has been connected by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/post_refresh-id}\n   */\n  public async refresh(token: string, accountId: string): Promise<void> {\n    return await this._client._apiCall<void>({\n      path: `/refresh/${accountId}`,\n      method: \"POST\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * Refresh all accounts that have been connected by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/post_refresh}\n   */\n  public async refreshAll(token: string): Promise<void> {\n    return await this._client._apiCall<void>({\n      path: \"/refresh\",\n      method: \"POST\",\n      auth: { token },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport { Connection } from \"../models\";\n\n/**\n * Utilities to view connections that are available to your app, and refresh\n * accounts under a given connection.\n *\n * @category Resource\n */\nexport class ConnectionsResource extends BaseResource {\n  /**\n   * List all connections that the app has access to.\n   *\n   * {@link https://developers.akahu.nz/reference/get_connections}\n   */\n  public async list(): Promise<Connection[]> {\n    return await this._client._apiCall<Connection[]>({\n      path: \"/connections\",\n      auth: { basic: true },\n    });\n  }\n\n  /**\n   * Get an individual connection detail.\n   *\n   * {@link https://developers.akahu.nz/reference/get_connections-id}\n   */\n  public async get(connectionId: string): Promise<Connection> {\n    return await this._client._apiCall<Connection>({\n      path: `/connections/${connectionId}`,\n      auth: { basic: true },\n    });\n  }\n\n  /**\n   * Refresh all accounts that are made using the given connection and have been\n   * connected by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/post_refresh-id}\n   */\n  public async refresh(token: string, connectionId: string): Promise<void> {\n    return await this._client._apiCall<void>({\n      path: `/refresh/${connectionId}`,\n      method: \"POST\",\n      auth: { token },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport { Category } from \"../models\";\n\n/**\n * Utilities to view categories that are available to your app.\n *\n * @category Resource\n */\nexport class CategoriesResource extends BaseResource {\n  /**\n   * List all categories that the app has access to.\n   *\n   * {@link https://developers.akahu.nz/reference/get_categories}\n   */\n  public async list(): Promise<Category[]> {\n    return await this._client._apiCall<Category[]>({\n      path: \"/categories\",\n      auth: { basic: true },\n    });\n  }\n\n  /**\n   * Get an individual category.\n   *\n   * {@link https://developers.akahu.nz/reference/get_categories-id}\n   */\n  public async get(categoryId: string): Promise<Category> {\n    return await this._client._apiCall<Category>({\n      path: `/categories/${categoryId}`,\n      auth: { basic: true },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport {\n  Payment,\n  PaymentCreateParams,\n  PaymentQueryParams,\n  PostRequestOptions,\n} from \"../models\";\nimport { IrdPaymentCreateParams } from \"../models/payments\";\n\n/**\n * Utilities for managing bank account payments on behalf of users.\n *\n * {@link https://developers.akahu.nz/docs/making-a-payment}\n *\n * @category Resource\n */\nexport class PaymentsResource extends BaseResource {\n  /**\n   * Get a single payment made by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_payments-id}\n   */\n  public async get(token: string, paymentId: string): Promise<Payment> {\n    return await this._client._apiCall<Payment>({\n      path: `/payments/${paymentId}`,\n      auth: { token },\n    });\n  }\n\n  /**\n   * List all payments made in the provided date range by the user associated\n   * with the specified `token`. Defaults to the last 30 days if no date range\n   * is provided.\n   *\n   * {@link https://developers.akahu.nz/reference/get_payments}\n   */\n  public async list(\n    token: string,\n    query: PaymentQueryParams = {}\n  ): Promise<Payment[]> {\n    // List endpoint with optional query params for date range\n    return await this._client._apiCall<Payment[]>({\n      path: \"/payments\",\n      auth: { token },\n      query,\n    });\n  }\n\n  /**\n   * Initiate a payment to an external bank account on behalf of the user associated\n   * with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/post_payments}\n   */\n  public async create(\n    token: string,\n    payment: PaymentCreateParams,\n    requestOptions?: PostRequestOptions\n  ): Promise<Payment> {\n    return await this._client._apiCall<Payment>({\n      path: \"/payments\",\n      method: \"POST\",\n      auth: { token },\n      data: payment,\n      options: requestOptions,\n    });\n  }\n\n  /**\n   * Initiate a payment to the Inland Revenue Department on behalf of the user\n   * associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/post_payments-ird}\n   */\n  public async createToIrd(\n    token: string,\n    payment: IrdPaymentCreateParams,\n    requestOptions?: PostRequestOptions\n  ): Promise<Payment> {\n    return await this._client._apiCall<Payment>({\n      path: \"/payments/ird\",\n      method: \"POST\",\n      auth: { token },\n      data: payment,\n      options: requestOptions,\n    });\n  }\n\n  /**\n   * Cancel a payment that has a status of `PENDING_APPROVAL`.\n   *\n   * {@link https://developers.akahu.nz/reference/put_payments-id-cancel}\n   * {@link https://developers.akahu.nz/docs/making-a-payment#manual-payment-approval}\n   */\n  public async cancel(token: string, paymentId: string) {\n    return this._client._apiCall<void>({\n      path: `/payments/${paymentId}`,\n      method: \"PUT\",\n      auth: { token },\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport {\n  Transfer,\n  TransferCreateParams,\n  TransferQueryParams,\n  PostRequestOptions,\n} from \"../models\";\n\n/**\n * Utilities for managing bank account transfers on behalf of users.\n *\n * {@link https://developers.akahu.nz/docs/making-a-transfer}\n *\n * @category Resource\n */\nexport class TransfersResource extends BaseResource {\n  /**\n   * Get a single transfer made by the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_transfers-id}\n   */\n  public async get(token: string, transferId: string): Promise<Transfer> {\n    return await this._client._apiCall<Transfer>({\n      path: `/transfers/${transferId}`,\n      auth: { token },\n    });\n  }\n\n  /**\n   * List all transfers made in the provided date range by the user associated\n   * with the specified `token`. Defaults to the last 30 days if no date range\n   * is provided.\n   *\n   * {@link https://developers.akahu.nz/reference/get_transfers}\n   */\n  public async list(\n    token: string,\n    query: TransferQueryParams = {}\n  ): Promise<Transfer[]> {\n    // List endpoint with optional query params for date range\n    return await this._client._apiCall<Transfer[]>({\n      path: \"/transfers\",\n      auth: { token },\n      query,\n    });\n  }\n\n  /**\n   * Initiate a transfer between two of the users bank accounts.\n   *\n   * {@link https://developers.akahu.nz/reference/post_transfers}\n   */\n  public async create(\n    token: string,\n    transfer: TransferCreateParams,\n    requestOptions?: PostRequestOptions\n  ): Promise<Transfer> {\n    return await this._client._apiCall<Transfer>({\n      path: \"/transfers\",\n      method: \"POST\",\n      auth: { token },\n      data: transfer,\n      options: requestOptions,\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport {\n  Transaction,\n  PendingTransaction,\n  TransactionQueryParams,\n  Paginated,\n} from \"../models\";\n\n/**\n * Utilities for retrieving bank transactions from connected user accounts.\n *\n * {@link https://developers.akahu.nz/docs/accessing-transactional-data}\n *\n * @category Resource\n */\nexport class TransactionsResource extends BaseResource {\n  /**\n   * List all transactions for all accounts that have been connected by the user associated with the\n   * specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_transactions}\n   */\n  public async list(\n    token: string,\n    query: TransactionQueryParams = {}\n  ): Promise<Paginated<Transaction>> {\n    // Paginated list endpoint with optional query params for date range & cursor\n    return await this._client._apiCall<Paginated<Transaction>>({\n      path: \"/transactions\",\n      auth: { token },\n      query,\n    });\n  }\n\n  /**\n   * List all pending transactions for all accounts that have been connected by the user associated with the\n   * specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_transactions-pending}\n   */\n  public async listPending(token: string): Promise<PendingTransaction[]> {\n    // Non-paginated list endpoint of pending transactions\n    return await this._client._apiCall<PendingTransaction[]>({\n      path: \"/transactions/pending\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * Get a single transaction from an account that has been connected by the user associated with\n   * the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_transactions-id}\n   */\n  public async get(token: string, transactionId: string): Promise<Transaction> {\n    return await this._client._apiCall<Transaction>({\n      path: `/transactions/${transactionId}`,\n      auth: { token },\n    });\n  }\n\n  /**\n   * Get multiple transactions by id.\n   *\n   * All transactions must belong to the user associated with the specified `token`.\n   *\n   * This method may be useful to bulk refresh changed transaction data\n   * in response to a webhook event.\n   *\n   * {@link https://developers.akahu.nz/reference/post_transactions-ids}\n   */\n  public async getMany(\n    token: string,\n    transactionIds: string[]\n  ): Promise<Transaction[]> {\n    // Non-paginated list endpoint subset by transaction id\n    return this._client._apiCall<Transaction[]>({\n      path: \"/transactions/ids\",\n      method: \"POST\",\n      auth: { token },\n      data: transactionIds,\n    });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport { User } from \"../models\";\n\n/**\n * Utilities for retrieving information about the Akahu user.\n *\n * @category Resource\n */\nexport class UsersResource extends BaseResource {\n  /**\n   * Get the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_me}\n   */\n  public async get(token: string): Promise<User> {\n    return await this._client._apiCall<User>({ path: \"/me\", auth: { token } });\n  }\n}\n","import { BaseResource } from \"./base\";\nimport { AkahuWebhookValidationError } from \"../errors\";\n\nimport type {\n  Webhook,\n  WebhookPayload,\n  WebhookEvent,\n  WebhookCreateParams,\n  WebhookEventQueryParams,\n} from \"../models/webhooks\";\nimport { PostRequestOptions } from \"../models\";\n\ntype CryptoModule = typeof import(\"crypto\");\n\n// crypto may not be available on all platforms (e.g React Native).\n// This is ok as we only need it server side. We just need to handle the import conditionally.\nlet crypto: CryptoModule | undefined;\n\ntry {\n  crypto = require(\"crypto\");\n} catch (e) {}\n\n/**\n * Setter and getter interface to enable external/shared caching of webhook\n * signing keys.\n *\n * Accessor functions may be async (by returning a Promise) or sync (by returning a value).\n *\n * See the project README for example usage.\n *\n * @category API client\n */\nexport interface WebhookSigningKeyCache {\n  get(key: string): string | null | Promise<string | null>;\n  set(key: string, value: string): void | Promise<void>;\n}\n\n/**\n * @category API client config\n */\nexport type WebhookCacheConfig = {\n  cache: WebhookSigningKeyCache;\n  key: string;\n  maxAgeMs: number;\n};\n\ntype CachedKeyData = {\n  id: number;\n  key: string;\n  lastRefreshed: string;\n};\n\n/**\n * Default in-memory cache for caching the webhook signing key.\n */\nclass DefaultKeyCache implements WebhookSigningKeyCache {\n  private readonly _cache: Record<string, string> = {};\n\n  async get(key: string): Promise<string | null> {\n    return this._cache[key] ?? null;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    this._cache[key] = value;\n  }\n}\n\n/**\n * Utilities for managing, retrieving, and validating webhooks.\n *\n * {@link https://developers.akahu.nz/docs/reference-webhooks}\n *\n * @category Resource\n */\nexport class WebhooksResource extends BaseResource {\n  private defaultKeyCache = new DefaultKeyCache();\n\n  /**\n   * Gets active webhooks for the user associated with the specified `token`.\n   *\n   * {@link https://developers.akahu.nz/reference/get_webhooks}\n   */\n  public async list(token: string): Promise<Webhook[]> {\n    return await this._client._apiCall<Webhook[]>({\n      path: \"/webhooks\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * Subscribe to a webhook.\n   *\n   * @returns The newly created webhook id.\n   *\n   * {@link https://developers.akahu.nz/reference/post_webhooks}\n   */\n  public async subscribe(\n    token: string,\n    webhook: WebhookCreateParams,\n    requestOptions?: PostRequestOptions\n  ): Promise<string> {\n    return await this._client._apiCall<string>({\n      path: \"/webhooks\",\n      method: \"POST\",\n      auth: { token },\n      data: webhook,\n      options: requestOptions,\n    });\n  }\n\n  /**\n   * Unsubscribe from a previously created webhook.\n   *\n   * {@link https://developers.akahu.nz/reference/delete_webhooks-id}\n   */\n  public async unsubscribe(token: string, webhookId: string): Promise<void> {\n    return await this._client._apiCall<void>({\n      path: `/webhooks/${webhookId}`,\n      method: \"DELETE\",\n      auth: { token },\n    });\n  }\n\n  /**\n   * List all webhook events with the specified status in the specified date\n   * range (defaults to last 30 days).\n   *\n   * {@link https://developers.akahu.nz/reference/get_webhook-events}\n   */\n  public async listEvents(\n    query: WebhookEventQueryParams\n  ): Promise<WebhookEvent[]> {\n    return await this._client._apiCall<WebhookEvent[]>({\n      path: \"/webhook-events\",\n      auth: { basic: true },\n      query,\n    });\n  }\n\n  /**\n   * Get a webhook signing public-key by id.\n   *\n   * {@link https://developers.akahu.nz/reference/get_keys-id}\n   */\n  public async getPublicKey(keyId: string | number): Promise<string> {\n    return await this._client._apiCall<string>({\n      path: `/keys/${keyId}`,\n      auth: { basic: true },\n    });\n  }\n\n  /**\n   * Helper to validate a webhook request payload.\n   *\n   * See the project README for example usage.\n   *\n   * @returns The deserialized webhook payload after successful validation\n   *\n   * @throws {@link AkahuWebhookValidationError}\n   * if validation of the webhook fails due to invalid signature or expired signing key.\n   *\n   * @throws {@link AkahuErrorResponse}\n   * if the client fails to fetch the specified signing key from the Akahu API.\n   *\n   * {@link https://developers.akahu.nz/docs/reference-webhooks}\n   */\n  public async validateWebhook(\n    keyId: string | number,\n    signature: string,\n    webhookRequestBody: string,\n    cacheConfig: Partial<WebhookCacheConfig> = {}\n  ): Promise<WebhookPayload> {\n    // Coerce keyId as a number\n    const _keyId = Number(keyId);\n\n    // Validate that keyId is an integer. Includes null check because Number(null) === 0\n    if (!Number.isInteger(_keyId) || keyId === null) {\n      throw new AkahuWebhookValidationError(\n        `Can't validate webhook request. keyId must be an integer (received ${keyId}).`\n      );\n    }\n\n    // Initialize cache config with defaults\n    const _cacheConfig = {\n      cache: this.defaultKeyCache,\n      key: \"akahu__webhook_key\",\n      maxAgeMs: 24 * 60 * 60 * 1000, // 24 hours\n      ...cacheConfig,\n    };\n\n    // Get the public key matching keyId - either from cache or API lookup\n    const publicKey = await this._getPublicKey(_keyId, _cacheConfig);\n\n    // Validate the webhook signature using the retreived public key\n    const isValid = this._validateWebhookSignature(\n      publicKey,\n      signature,\n      webhookRequestBody\n    );\n\n    if (!isValid) {\n      throw new AkahuWebhookValidationError(\n        \"Webhook signature verificaton failed.\"\n      );\n    }\n\n    return JSON.parse(webhookRequestBody) as WebhookPayload;\n  }\n\n  /**\n   * Get the public key (by id) to validate a webhook signature.\n   * The key will be retrieved from cache if possible, falling back to API lookup.\n   * If a cached key exists with a newer id, an error will be thrown, as the existence of a newer\n   * key implies that the key has been rotated and the requested key is no longer valid.\n   *\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\n   */\n  private async _getPublicKey(\n    keyId: number,\n    cacheConfig: WebhookCacheConfig\n  ): Promise<string> {\n    // Attempt to lookup key from cache\n    const keyDataFromCache = await this._getPublicKeyFromCache(cacheConfig);\n\n    // Validate the cached key matches\n    if (keyDataFromCache !== null) {\n      const { id, key } = keyDataFromCache;\n\n      // Validate that the cached key has same id as requested key\n      if (keyId === id) {\n        return key;\n      }\n\n      // Throw an error if the requested key has been superseded\n      if (keyId < id) {\n        throw new AkahuWebhookValidationError(\n          `Webhook signing key (id: ${keyId}) has expired. Unable to validate webhook.`\n        );\n      }\n\n      // Fallback to lookup via API\n    }\n\n    // Lookup key data from API\n    const freshKeyData: CachedKeyData = {\n      id: keyId,\n      lastRefreshed: new Date().toISOString(),\n      key: await this.getPublicKey(keyId),\n    };\n\n    // Cache the updated key data\n    await this._cacheKeyData(freshKeyData, cacheConfig);\n\n    return freshKeyData.key;\n  }\n\n  /**\n   * Lookup current active public key from the cache.\n   * If the key has been in the cache for more than `maxAgeMs` milliseconds, it is considered\n   * stale, and will be ignored - causing it to be re-fetched from Akahu. `maxAgeMs` defaults to 24 hours.\n   *\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\n   */\n  private async _getPublicKeyFromCache(\n    cacheConfig: WebhookCacheConfig\n  ): Promise<CachedKeyData | null> {\n    const { cache, key: cacheKey, maxAgeMs } = cacheConfig;\n\n    // Lookup key data from cache\n    const rawFromCache = await cache.get(cacheKey);\n\n    // Cache hit\n    if (typeof rawFromCache === \"string\") {\n      let keyData: CachedKeyData | undefined;\n\n      // Deserialize key data JSON from cache\n      try {\n        keyData = JSON.parse(rawFromCache);\n      } catch (e) {\n        // Warn but no error if invalid JSON in cache data\n        console.warn(\n          `akahu-sdk: Failed to deserialize webhook key data from cache (key: ${cacheKey}).`\n        );\n      }\n\n      // Validate the key data from cache\n      if (typeof keyData !== \"undefined\") {\n        // Ensure that the cache is at most `maxAgeMs` old\n        const cacheAgeMs = Date.now() - Date.parse(keyData.lastRefreshed);\n        // NaN check in case lastRefreshed is invalid date string or undefined somehow\n        if (!Number.isNaN(cacheAgeMs) && cacheAgeMs < maxAgeMs) {\n          return keyData;\n        }\n      }\n    }\n\n    // Cache miss or invalid cache data\n    return null;\n  }\n\n  /**\n   * Add the public key that has been fetched from the API to the cache.\n   *\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#caching}\n   */\n  private async _cacheKeyData(\n    keyData: CachedKeyData,\n    cacheConfig: WebhookCacheConfig\n  ): Promise<void> {\n    const { cache, key } = cacheConfig;\n    await cache.set(key, JSON.stringify(keyData));\n  }\n\n  /**\n   * Validate a webhook and associated signature using the public key fetched from the Akahu API.\n   *\n   * {@link https://developers.akahu.nz/docs/reference-webhooks#verification}\n   */\n  private _validateWebhookSignature(\n    publicKey: string,\n    signature: string,\n    webhookBody: string\n  ): boolean {\n    if (typeof crypto === \"undefined\") {\n      throw new Error(\n        \"Webhook validation is only supported on Node.js environments.\"\n      );\n    }\n\n    const verify = crypto.createVerify(\"sha256\");\n    verify.update(webhookBody);\n    verify.end();\n\n    return verify.verify(publicKey, signature, \"base64\");\n  }\n}\n","import { BaseResource } from \"./base\";\n\nimport { Party } from \"../models\";\n\n/**\n * Fetch identity data relating to the party that the user has logged-in to\n * their institution as when connecting accounts to Akahu. i.e. the user's\n * \"profile\" information at the connected institution.\n * @category Resource\n */\nexport class PartiesResource extends BaseResource {\n  /**\n   * List all parties related to accounts which the user has shared with your\n   * app.\n   *\n   * {@link https://developers.akahu.nz/reference/get_parties}\n   */\n  public async list(token: string): Promise<Party[]> {\n    return await this._client._apiCall<Party[]>({\n      path: \"/parties\",\n      auth: { token },\n    });\n  }\n}\n","import axios, { AxiosError } from \"axios\";\nimport type {\n  AxiosAdapter,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from \"axios\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n  buildUrl,\n  pick,\n  Protocol,\n  isNode,\n  isBrowser,\n  axiosRetryOnNetworkError,\n} from \"./utils\";\nimport { version } from \"./version\";\nimport { AkahuErrorResponse } from \"./errors\";\n\nimport { Paginated, PostRequestOptions } from \"./models\";\nimport { AuthResource } from \"./resources/auth\";\nimport { IdentitiesResource } from \"./resources/identities\";\nimport { AccountsResource } from \"./resources/accounts\";\nimport { ConnectionsResource } from \"./resources/connections\";\nimport { CategoriesResource } from \"./resources/categories\";\nimport { PaymentsResource } from \"./resources/payments\";\nimport { TransfersResource } from \"./resources/transfers\";\nimport { TransactionsResource } from \"./resources/transactions\";\nimport { UsersResource } from \"./resources/users\";\nimport { WebhooksResource } from \"./resources/webhooks\";\nimport { PartiesResource } from \"./resources/parties\";\n\n// We will set this header to report SDK version\nconst X_AKAHU_SDK = `akahu-sdk-js/${version}`;\n\ntype ApiVersion = \"v1\";\ntype RequestOptions = PostRequestOptions;\n\n/**\n * @category API client config\n */\nexport { Protocol } from \"./utils\";\n\n/**\n * Authentication and API endpoint configuration for {@link AkahuClient}.\n * @category API client config\n */\nexport type AkahuClientConfig = {\n  /**\n   * appToken is required to access the Akahu API.\n   */\n  appToken: string;\n  /**\n   * appSecret is only required for completing an OAuth code exchange, or to\n   * access app-specific endpoints.\n   *\n   * For security reasons, this option must not be used client-side in the browser.\n   *\n   * {@link https://developers.akahu.nz/reference/api_index}\n   *\n   * @defaultValue `undefined`\n   */\n  appSecret?: string;\n  /**\n   * The Akahu API version. Currently the only supported value is \"v1\".\n   *\n   * @defaultValue `v1`\n   */\n  apiVersion?: ApiVersion;\n  /**\n   * The protocol used for Akahu API calls.\n   * The Akahu API only supports connections over HTTPS, so this option is only\n   * useful for test environments etc.\n   *\n   * @defaultValue `https`\n   */\n  protocol?: Protocol;\n  /**\n   * The Akahu API hostname.\n   * It may be useful to override this in staging / testing environments.\n   *\n   * @defaultValue `api.akahu.io`\n   */\n  host?: string;\n  /**\n   * The Akahu API port.\n   * It may be useful to override this in staging / testing environments.\n   *\n   * @defaultValue `undefined`\n   */\n  port?: number;\n  /**\n   * Additional headers that will be included in each request.\n   */\n  headers?: Record<string, string>;\n  /**\n   * Timeout in ms for each request to the Akahu API.\n   *\n   * If used in combination with `retries`, the timeout will be applied to\n   * each retried request. This means that the total time until an error is\n   * thrown due to a timeout will be `timeout * (retries + 1)` milliseconds.\n   *\n   * @defaultValue `0` (no timeout)\n   */\n  timeout?: number;\n  /**\n   * The number of times that API requests will be retried in the case of\n   * network errors. Error responses from the Akahu API will not result in\n   * a retry.\n   *\n   * @defaultValue `0`\n   */\n  retries?: number;\n  /**\n   * Optional configuration for an HTTP proxy.\n   *\n   * See the proxy section of the axios {@link https://axios-http.com/docs/req_config request config}\n   * for more details.\n   */\n  proxy?: {\n    host: string;\n    port: number;\n    auth?: {\n      username: string;\n      password: string;\n    };\n    protocol?: string;\n  };\n  /**\n   * Optional adapter function which will be passed through to the underlying\n   * Axios instance.\n   *\n   * See {@link https://github.com/axios/axios/tree/v1.x/lib/adapters}.\n   */\n  adapter?: AxiosAdapter;\n};\n\n// We allow custom axios configuration using this subset of options\nconst allowedAxiosOptions = [\n  \"headers\",\n  \"timeout\",\n  \"proxy\",\n  \"retries\",\n  \"adapter\",\n] as const;\n\n// Internal flag to switch between API authentication methods\ntype AuthMethod = { basic: true } | { token: string };\n\n// Internal union type to capture the different shapes of response payloads\ntype ApiResponsePayload =\n  | Record<string, any> // Generic `item` response\n  | Record<string, any>[] // `items` list response\n  | Paginated<Record<string, any>> // Paginated `items` list response\n  | string // `item_id` response\n  | void; // No response payload\n\n/**\n * The AkahuClient provides a simple interface to the Akahu API and utilities\n * that assist with common usage patterns.\n *\n * AkahuClient uses {@link https://axios-http.com/docs/intro axios} under the hood to make\n * API requests. A subset of axios request options can be passed through to the underlying axios\n * instance using the options available in {@link AkahuClientConfig}.\n *\n * In the case of an error while making an API request, you can expect to handle one of the\n * following two exceptions:\n *\n * - {@link AkahuErrorResponse} When an error response is returned from the API\n * - {@link https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85 AxiosError} when an error\n *    occurred during the request process, but no response was received (i.e. due to network issues).\n *\n * @category API client\n */\nexport class AkahuClient {\n  private readonly axios: AxiosInstance;\n  /** @internal */\n  readonly authConfig: { appToken: string; appSecret?: string };\n\n  /**\n   * @category Resource\n   * @inheritDoc AuthResource\n   * */\n  auth: AuthResource;\n  /**\n   * @category Resource\n   * @inheritDoc IdentitiesResource\n   * */\n  identities: IdentitiesResource;\n  /**\n   * @category Resource\n   * @inheritDoc UsersResource\n   * */\n  users: UsersResource;\n  /**\n   * @category Resource\n   * @inheritDoc ConnectionsResource\n   * */\n  connections: ConnectionsResource;\n  /**\n   * @category Resource\n   * @inheritDoc CategoriesResource\n   * */\n  categories: CategoriesResource;\n  /**\n   * @category Resource\n   * @inheritDoc AccountsResource\n   * */\n  accounts: AccountsResource;\n  /**\n   * @category Resource\n   * @inheritDoc PaymentsResource\n   * */\n  payments: PaymentsResource;\n  /**\n   * @category Resource\n   * @inheritDoc TransfersResource\n   * */\n  transfers: TransfersResource;\n  /**\n   * @category Resource\n   * @inheritDoc TransactionsResource\n   * */\n  transactions: TransactionsResource;\n  /**\n   * @category Resource\n   * @inheritDoc WebhooksResource\n   * */\n  webhooks: WebhooksResource;\n  /**\n   * @category Resource\n   * @inheritDoc PartiesResource\n   * */\n  parties: PartiesResource;\n\n  constructor(config: AkahuClientConfig) {\n    const {\n      appToken,\n      appSecret,\n      apiVersion,\n      protocol,\n      host,\n      port,\n      ...axiosOptions\n    } = {\n      apiVersion: \"v1\" as const,\n      protocol: \"https\" as const,\n      host: \"api.akahu.io\",\n      ...config,\n    };\n\n    // Sanity check to warn against insecure App Secret usage\n    if (typeof appSecret !== \"undefined\" && !isNode()) {\n      console.warn(\n        \"Warning: do not use the appSecret option with AkahuClient in a client-side \" +\n          \"application. This option is only intended to be used on a server environment.\"\n      );\n    }\n\n    // Make sure the appToken is included and follows the expected format\n    if (typeof appToken !== \"string\" || !appToken.startsWith(\"app_token_\")) {\n      throw new Error(\n        `Invalid appToken value: ${appToken}. ` +\n          \"appToken must be a string beginning with app_token_\"\n      );\n    }\n\n    this.authConfig = { appToken, appSecret };\n\n    // Common headers that we will send with each request\n    const akahuHeaders: Record<string, string> = {\n      \"X-Akahu-Sdk\": X_AKAHU_SDK, // Report the SDK version\n      \"X-Akahu-Id\": appToken, // Identify the calling app\n    };\n\n    // Also report SDK version in the User-Agent for convenience / visibility in logs. However\n    // we don't want to set this in a browser environment as not all browsers support overriding\n    // this header and it may result in un-suppressible errors in the browser console.\n    // e.g: https://github.com/axios/axios/issues/1231\n    if (!isBrowser()) {\n      akahuHeaders[\"User-Agent\"] = X_AKAHU_SDK;\n    }\n\n    // Filter user-provided config to ensure we only include supported options.\n    const filteredAxiosOptions = pick(axiosOptions, ...allowedAxiosOptions);\n\n    this.axios = axios.create({\n      ...filteredAxiosOptions,\n      baseURL: buildUrl({ protocol, host, port, path: apiVersion }),\n      headers: { ...filteredAxiosOptions.headers, ...akahuHeaders },\n    });\n\n    this.axios.interceptors.response.use(undefined, axiosRetryOnNetworkError);\n\n    // Initialise client resources\n    this.auth = new AuthResource(this);\n    this.identities = new IdentitiesResource(this);\n    this.users = new UsersResource(this);\n    this.connections = new ConnectionsResource(this);\n    this.categories = new CategoriesResource(this);\n    this.accounts = new AccountsResource(this);\n    this.payments = new PaymentsResource(this);\n    this.transfers = new TransfersResource(this);\n    this.transactions = new TransactionsResource(this);\n    this.webhooks = new WebhooksResource(this);\n    this.parties = new PartiesResource(this);\n  }\n\n  private _authorizeRequest(\n    config: AxiosRequestConfig,\n    auth?: AuthMethod\n  ): AxiosRequestConfig {\n    if (typeof auth !== \"undefined\") {\n      // Basic HTTP auth is use for \"app\" endpoints\n      if (\"basic\" in auth && auth.basic) {\n        const { appToken, appSecret } = this.authConfig;\n\n        if (typeof appSecret === \"undefined\") {\n          throw new Error(\n            \"This resource requires authentication using your Akahu app secret. \" +\n              \"Include this using the `appSecret` option when initializing the AkahuClient.\"\n          );\n        }\n        return { ...config, auth: { username: appToken, password: appSecret } };\n      }\n      // Token auth is used for user-specific endpoints\n      if (\"token\" in auth) {\n        return {\n          ...config,\n          headers: {\n            ...config.headers,\n            Authorization: `Bearer ${auth.token}`,\n          },\n        };\n      }\n    }\n\n    return config;\n  }\n\n  private _makeIdempotent(\n    config: AxiosRequestConfig,\n    options: RequestOptions\n  ): AxiosRequestConfig {\n    if (config.method?.toUpperCase() === \"POST\") {\n      return {\n        ...config,\n        headers: {\n          ...config.headers,\n          \"Idempotency-Key\": options.idempotencyKey ?? uuidv4(),\n        },\n      };\n    }\n\n    return config;\n  }\n\n  private _sanitizeQuery(query: Record<string, any>): Record<string, any> {\n    // Sanity check for attempts to paginate with a `null` cursor. This might\n    // happen if the user blindly passes in the \"next\" cursor from a paginated\n    // response without checking its value. `query.cursor` must either be\n    // `undefined` or a string value.\n    if (query.cursor === null) {\n      throw new Error(\n        \"Pagination cursor cannot be null. A null next cursor in an API \" +\n          \"response indicates that the final page has been reached.\"\n      );\n    }\n\n    return query;\n  }\n\n  /**\n   * Generic API wrapper, exposed for use by client resources.\n   * @internal\n   */\n  async _apiCall<T extends ApiResponsePayload>({\n    path,\n    method = \"GET\",\n    query,\n    data,\n    auth,\n    options = {},\n  }: {\n    path: string;\n    method?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n    query?: Record<string, any>;\n    data?: any;\n    auth?: AuthMethod;\n    options?: RequestOptions;\n  }): Promise<T> {\n    let params = query;\n\n    if (typeof params !== \"undefined\") {\n      params = this._sanitizeQuery(params);\n    }\n\n    // Build up the request config object for axios\n    let requestConfig: AxiosRequestConfig = { url: path, method, params, data };\n    requestConfig = this._authorizeRequest(requestConfig, auth);\n    requestConfig = this._makeIdempotent(requestConfig, options);\n\n    let response: AxiosResponse;\n\n    try {\n      response = await this.axios.request(requestConfig);\n    } catch (e) {\n      const err = e as AxiosError;\n      // Wrap error responses from the API\n      if (typeof err.response !== \"undefined\") {\n        throw new AkahuErrorResponse(err.response);\n      }\n      // All other errors are re-raised.\n      throw err;\n    }\n\n    // Unpack response:\n    // - success will always be present\n    // - cursor will be present in the case of paginated responses\n    // - response value will generally be nested under `item`, `items`, or `item_id`\n    const { success, cursor, ...payload } = response.data;\n\n    // Check status flag from API. Generally we shouldn't hit this, as any response\n    // with `success: false` should return a 4xx or 5xx status which would\n    // cause an exception above.\n    if (!success) throw new AkahuErrorResponse(response);\n\n    // Results from paginated responses are always nested under `items`\n    if (cursor) {\n      return { cursor, items: payload.items } as T;\n    }\n\n    // Unpacking of non-paginated response formats:\n    // https://developers.akahu.nz/docs/response-formatting\n    // Order is important here, as some endpoints return both `item` and\n    // `item_id`, the latter of which is deprecated.\n    return (payload.item ?? // Single item response\n      payload.item_id ?? // Item id response\n      payload.items ?? // Item list response\n      (Object.keys(payload).length !== 0\n        ? payload // OAuth response data is not nested to be spec-compliant\n        : undefined)) as T; // No response payload: no return value\n  }\n}\n"],"names":["uuidv4"],"mappings":"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"}