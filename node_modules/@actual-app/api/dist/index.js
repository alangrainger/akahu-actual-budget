"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shutdown = exports.init = exports.utils = exports.methods = exports.internal = void 0;
// @ts-ignore: bundle not available until we build it
// eslint-disable-next-line import/extensions
const bundle = __importStar(require("./app/bundle.api.js"));
const injected = __importStar(require("./injected"));
const validateNodeVersion_1 = require("./validateNodeVersion");
let actualApp;
exports.internal = bundle.lib;
// DEPRECATED: remove the next line in @actual-app/api v7
exports.methods = __importStar(require("./methods"));
__exportStar(require("./methods"), exports);
exports.utils = __importStar(require("./utils"));
async function init(config = {}) {
    if (actualApp) {
        return;
    }
    (0, validateNodeVersion_1.validateNodeVersion)();
    if (!globalThis.fetch) {
        globalThis.fetch = (url, init) => {
            return Promise.resolve().then(() => __importStar(require('node-fetch'))).then(({ default: fetch }) => fetch(url, init));
        };
    }
    await bundle.init(config);
    actualApp = bundle.lib;
    injected.override(bundle.lib.send);
    return bundle.lib;
}
exports.init = init;
async function shutdown() {
    if (actualApp) {
        await actualApp.send('sync');
        await actualApp.send('close-budget');
        actualApp = null;
    }
}
exports.shutdown = shutdown;
