"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteRule = exports.updateRule = exports.createRule = exports.getPayeeRules = exports.getRules = exports.mergePayees = exports.deletePayee = exports.updatePayee = exports.createPayee = exports.getPayees = exports.getCommonPayees = exports.deleteCategory = exports.updateCategory = exports.createCategory = exports.getCategories = exports.deleteCategoryGroup = exports.updateCategoryGroup = exports.createCategoryGroup = exports.getCategoryGroups = exports.getAccountBalance = exports.deleteAccount = exports.reopenAccount = exports.closeAccount = exports.updateAccount = exports.createAccount = exports.getAccounts = exports.deleteTransaction = exports.updateTransaction = exports.getTransactions = exports.importTransactions = exports.addTransactions = exports.setBudgetCarryover = exports.setBudgetAmount = exports.getBudgetMonth = exports.getBudgetMonths = exports.runQuery = exports.batchBudgetUpdates = exports.runBankSync = exports.sync = exports.getBudgets = exports.downloadBudget = exports.loadBudget = exports.runImport = exports.q = void 0;
const injected = __importStar(require("./injected"));
var query_1 = require("./app/query");
Object.defineProperty(exports, "q", { enumerable: true, get: function () { return query_1.q; } });
function send(name, args) {
    return injected.send(name, args);
}
async function runImport(name, func) {
    await send('api/start-import', { budgetName: name });
    try {
        await func();
    }
    catch (e) {
        await send('api/abort-import');
        throw e;
    }
    await send('api/finish-import');
}
exports.runImport = runImport;
async function loadBudget(budgetId) {
    return send('api/load-budget', { id: budgetId });
}
exports.loadBudget = loadBudget;
async function downloadBudget(syncId, { password } = {}) {
    return send('api/download-budget', { syncId, password });
}
exports.downloadBudget = downloadBudget;
async function getBudgets() {
    return send('api/get-budgets');
}
exports.getBudgets = getBudgets;
async function sync() {
    return send('api/sync');
}
exports.sync = sync;
async function runBankSync(args) {
    return send('api/bank-sync', args);
}
exports.runBankSync = runBankSync;
async function batchBudgetUpdates(func) {
    await send('api/batch-budget-start');
    try {
        await func();
    }
    finally {
        await send('api/batch-budget-end');
    }
}
exports.batchBudgetUpdates = batchBudgetUpdates;
function runQuery(query) {
    return send('api/query', { query: query.serialize() });
}
exports.runQuery = runQuery;
function getBudgetMonths() {
    return send('api/budget-months');
}
exports.getBudgetMonths = getBudgetMonths;
function getBudgetMonth(month) {
    return send('api/budget-month', { month });
}
exports.getBudgetMonth = getBudgetMonth;
function setBudgetAmount(month, categoryId, value) {
    return send('api/budget-set-amount', { month, categoryId, amount: value });
}
exports.setBudgetAmount = setBudgetAmount;
function setBudgetCarryover(month, categoryId, flag) {
    return send('api/budget-set-carryover', { month, categoryId, flag });
}
exports.setBudgetCarryover = setBudgetCarryover;
function addTransactions(accountId, transactions, { learnCategories = false, runTransfers = false } = {}) {
    return send('api/transactions-add', {
        accountId,
        transactions,
        learnCategories,
        runTransfers,
    });
}
exports.addTransactions = addTransactions;
function importTransactions(accountId, transactions) {
    return send('api/transactions-import', { accountId, transactions });
}
exports.importTransactions = importTransactions;
function getTransactions(accountId, startDate, endDate) {
    return send('api/transactions-get', { accountId, startDate, endDate });
}
exports.getTransactions = getTransactions;
function updateTransaction(id, fields) {
    return send('api/transaction-update', { id, fields });
}
exports.updateTransaction = updateTransaction;
function deleteTransaction(id) {
    return send('api/transaction-delete', { id });
}
exports.deleteTransaction = deleteTransaction;
function getAccounts() {
    return send('api/accounts-get');
}
exports.getAccounts = getAccounts;
function createAccount(account, initialBalance) {
    return send('api/account-create', { account, initialBalance });
}
exports.createAccount = createAccount;
function updateAccount(id, fields) {
    return send('api/account-update', { id, fields });
}
exports.updateAccount = updateAccount;
function closeAccount(id, transferAccountId, transferCategoryId) {
    return send('api/account-close', {
        id,
        transferAccountId,
        transferCategoryId,
    });
}
exports.closeAccount = closeAccount;
function reopenAccount(id) {
    return send('api/account-reopen', { id });
}
exports.reopenAccount = reopenAccount;
function deleteAccount(id) {
    return send('api/account-delete', { id });
}
exports.deleteAccount = deleteAccount;
function getAccountBalance(id, cutoff) {
    return send('api/account-balance', { id, cutoff });
}
exports.getAccountBalance = getAccountBalance;
function getCategoryGroups() {
    return send('api/category-groups-get');
}
exports.getCategoryGroups = getCategoryGroups;
function createCategoryGroup(group) {
    return send('api/category-group-create', { group });
}
exports.createCategoryGroup = createCategoryGroup;
function updateCategoryGroup(id, fields) {
    return send('api/category-group-update', { id, fields });
}
exports.updateCategoryGroup = updateCategoryGroup;
function deleteCategoryGroup(id, transferCategoryId) {
    return send('api/category-group-delete', { id, transferCategoryId });
}
exports.deleteCategoryGroup = deleteCategoryGroup;
function getCategories() {
    return send('api/categories-get', { grouped: false });
}
exports.getCategories = getCategories;
function createCategory(category) {
    return send('api/category-create', { category });
}
exports.createCategory = createCategory;
function updateCategory(id, fields) {
    return send('api/category-update', { id, fields });
}
exports.updateCategory = updateCategory;
function deleteCategory(id, transferCategoryId) {
    return send('api/category-delete', { id, transferCategoryId });
}
exports.deleteCategory = deleteCategory;
function getCommonPayees() {
    return send('api/common-payees-get');
}
exports.getCommonPayees = getCommonPayees;
function getPayees() {
    return send('api/payees-get');
}
exports.getPayees = getPayees;
function createPayee(payee) {
    return send('api/payee-create', { payee });
}
exports.createPayee = createPayee;
function updatePayee(id, fields) {
    return send('api/payee-update', { id, fields });
}
exports.updatePayee = updatePayee;
function deletePayee(id) {
    return send('api/payee-delete', { id });
}
exports.deletePayee = deletePayee;
function mergePayees(targetId, mergeIds) {
    return send('api/payees-merge', { targetId, mergeIds });
}
exports.mergePayees = mergePayees;
function getRules() {
    return send('api/rules-get');
}
exports.getRules = getRules;
function getPayeeRules(id) {
    return send('api/payee-rules-get', { id });
}
exports.getPayeeRules = getPayeeRules;
function createRule(rule) {
    return send('api/rule-create', { rule });
}
exports.createRule = createRule;
function updateRule(rule) {
    return send('api/rule-update', { rule });
}
exports.updateRule = updateRule;
function deleteRule(id) {
    return send('api/rule-delete', { id });
}
exports.deleteRule = deleteRule;
